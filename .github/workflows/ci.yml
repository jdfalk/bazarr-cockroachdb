name: CI

on:
  push:
    branches: 
      - develop
    paths:
      - frontend/**
      - bazarr/**
      - migrations/**
      - bazarr.py
      - pyproject.toml
      - uv.lock
      - .python-version
      - .github/workflows/ci.yml
  pull_request:
    branches: 
      - develop
# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  UI_DIRECTORY: ./frontend
  UI_ARTIFACT_NAME: ui
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  Frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: "${{ env.UI_DIRECTORY }}/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-modules-

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version-file: "${{ env.UI_DIRECTORY }}/.nvmrc"

      - name: Install dependencies
        run: npm install
        working-directory: ${{ env.UI_DIRECTORY }}
      
      - name: Update browserlist
        run: npx update-browserslist-db@latest
        working-directory: ${{ env.UI_DIRECTORY }}

      - name: Check Types
        run: npm run check:ts
        working-directory: ${{ env.UI_DIRECTORY }}

      - name: Check Styles
        run: npm run check
        working-directory: ${{ env.UI_DIRECTORY }}

      - name: Check Format
        run: npm run check:fmt
        working-directory: ${{ env.UI_DIRECTORY }}

      - name: Unit Test
        run: npm test
        working-directory: ${{ env.UI_DIRECTORY }}

      - name: Build
        run: npm run build:ci
        working-directory: ${{ env.UI_DIRECTORY }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UI_ARTIFACT_NAME }}
          path: "${{ env.UI_DIRECTORY }}/build"

  Backend:
    runs-on: ubuntu-latest
    needs: Frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: "${{ env.UI_DIRECTORY }}/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-modules-

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version-file: "${{ env.UI_DIRECTORY }}/.nvmrc"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.4.25"  # Best practice: pin uv version
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install python3.8

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Remove non-develop frontend build
        run: rm -rf "${{ env.UI_DIRECTORY }}/build"

      - name: Install UI
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.UI_ARTIFACT_NAME }}
          path: "${{ env.UI_DIRECTORY }}/build"

      - name: Unit Tests
        run: |
          uv run -- bazarr.py --no-update &
          PID=$!
          sleep 15
          if kill -s 0 $PID
          then
            echo "**** Bazarr launch successful ****"
            kill $PID
            exit 0
          else
          echo "**** Bazarr launch failed ****"
            exit 1
          fi

      - name: Minimize uv cache
        run: uv cache prune --ci
  build-and-push-image:
    needs:
      - Frontend
      - Backend
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      # 
    steps:
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      # - name: Remove non-develop frontend build
      #   run: rm -rf "${{ env.UI_DIRECTORY }}/build"
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: |
            DOCKER_METADATA_OUTPUT_JSON
      
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
      
      
      